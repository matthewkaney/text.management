{"mappings":";;;;;;;;ACAA;AAQO,MAAM,yCAAoB,GAAG,CAAA,GAAA,kCAAW,CAAA,CAAC,MAAM,EAAkB,AAAC;AAElE,MAAM,yCAAY,GAAG,CAAA,GAAA,iCAAU,CAAA,CAAC,MAAM,CAAmB;IAC9D,MAAM,EAAE,IAAM;QACZ,OAAO,EAAE,CAAC;KACX;IAED,MAAM,EAAE,CAAC,KAAK,EAAE,WAAW,GAAK;QAC9B,KAAK,IAAI,MAAM,IAAI,WAAW,CAAC,OAAO,CAAE;YACtC,IAAI,MAAM,CAAC,EAAE,CAAC,yCAAoB,CAAC,EACjC,OAAO;mBAAI,KAAK;gBAAE,MAAM,CAAC,KAAK;aAAC,CAAC;SAEnC;QAED,OAAO,KAAK,CAAC;KACd;CACF,CAAC,AAAC;;ADxBH;AEAA;;AAIA,SAAS,6CAAuB,CAAC,IAAgB,EAAS;IACxD,IAAI,WAAW,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,AAAC;IAEhD,IAAI,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAA,GAAA,yCAAY,CAAA,EAAE,KAAK,CAAC,IAAI,EAAE,AAAC;IAE3D,KAAK,IAAI,OAAO,IAAI,QAAQ,CAC1B,WAAW,CAAC,WAAW,CAAC,wCAAkB,CAAC,OAAO,CAAC,CAAC,CAAC;IAGvD,OAAO;QACL,GAAG,EAAE,WAAW;QAChB,MAAM,EAAC,MAAM,EAAE;YACb,KAAK,IAAI,WAAW,IAAI,MAAM,CAAC,YAAY,CAAE;gBAC3C,KAAK,IAAI,MAAM,IAAI,WAAW,CAAC,OAAO,CACpC,IAAI,MAAM,CAAC,EAAE,CAAC,CAAA,GAAA,yCAAoB,CAAA,CAAC,EACjC,WAAW,CAAC,WAAW,CAAC,wCAAkB,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;aAG/D;SACF;QACD,OAAO,IAAG,EAAE;KACb,CAAC;CACH;AAED,SAAS,wCAAkB,CAAC,OAAuB,EAAE;IACnD,MAAM,WAAW,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,AAAC;IAClD,WAAW,CAAC,SAAS,GAAG,OAAO,CAAC,IAAI,CAAC;IACrC,OAAO,WAAW,CAAC;CACpB;AAEM,MAAM,wCAAY,GAAG,CAAA,GAAA,+BAAS,CAAA,CAAC,EAAE,CAAC,6CAAuB,CAAC,AAAC;;;AF7B3D,SAAS,yCAAO,GAAc;IACnC,OAAO;QAAC,CAAA,GAAA,yCAAY,CAAA;QAAE,CAAA,GAAA,wCAAY,CAAA;KAAC,CAAC;CACrC","sources":["packages/codemirror/console/src/index.ts","packages/codemirror/console/src/state.ts","packages/codemirror/console/src/panel.ts"],"sourcesContent":["import { Extension } from \"@codemirror/state\";\n\nimport { consoleState } from \"./state\";\nimport { consolePanel } from \"./panel\";\n\nexport function console(): Extension {\n  return [consoleState, consolePanel];\n}\n","import { StateField, StateEffect } from \"@codemirror/state\";\n\nexport interface ConsoleMessage {\n  level: \"info\" | \"warn\" | \"error\";\n  source: string;\n  text: string;\n}\n\nexport const consoleMessageEffect = StateEffect.define<ConsoleMessage>();\n\nexport const consoleState = StateField.define<ConsoleMessage[]>({\n  create: () => {\n    return [];\n  },\n\n  update: (value, transaction) => {\n    for (let effect of transaction.effects) {\n      if (effect.is(consoleMessageEffect)) {\n        return [...value, effect.value];\n      }\n    }\n\n    return value;\n  },\n});\n","import { EditorView, showPanel, Panel } from \"@codemirror/view\";\n\nimport { ConsoleMessage, consoleState, consoleMessageEffect } from \"./state\";\n\nfunction consolePanelConstructor(view: EditorView): Panel {\n  let consoleNode = document.createElement(\"div\");\n\n  let messages = view.state.field(consoleState, false) || [];\n\n  for (let message of messages) {\n    consoleNode.appendChild(messageConstructor(message));\n  }\n\n  return {\n    dom: consoleNode,\n    update(update) {\n      for (let transaction of update.transactions) {\n        for (let effect of transaction.effects) {\n          if (effect.is(consoleMessageEffect)) {\n            consoleNode.appendChild(messageConstructor(effect.value));\n          }\n        }\n      }\n    },\n    destroy() {},\n  };\n}\n\nfunction messageConstructor(message: ConsoleMessage) {\n  const messageNode = document.createElement(\"div\");\n  messageNode.innerText = message.text;\n  return messageNode;\n}\n\nexport const consolePanel = showPanel.of(consolePanelConstructor);\n"],"names":[],"version":3,"file":"index.js.map","sourceRoot":"../../../"}